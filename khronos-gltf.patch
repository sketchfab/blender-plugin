diff --git a/addons/io_scene_gltf2/io/com/gltf2_io.py b/addons/io_scene_gltf2/io/com/gltf2_io.py
index d00a914d..a51ff4e3 100644
--- a/addons/io_scene_gltf2/io/com/gltf2_io.py
+++ b/addons/io_scene_gltf2/io/com/gltf2_io.py
@@ -26,7 +26,7 @@
 import sys
 import traceback
 
-from io_scene_gltf2.io.com import gltf2_io_debug
+from . import gltf2_io_debug
 
 
 def from_int(x):
diff --git a/addons/io_scene_gltf2/io/com/gltf2_io_debug.py b/addons/io_scene_gltf2/io/com/gltf2_io_debug.py
index 290616cc..f987d9e3 100644
--- a/addons/io_scene_gltf2/io/com/gltf2_io_debug.py
+++ b/addons/io_scene_gltf2/io/com/gltf2_io_debug.py
@@ -124,3 +124,17 @@ class Log:
         self.hdlr.setFormatter(formatter)
         self.logger.addHandler(self.hdlr)
         self.logger.setLevel(int(loglevel))
+
+    def getLevels():
+        levels = [
+        (str(logging.CRITICAL), "Critical", "", logging.CRITICAL),
+        (str(logging.ERROR), "Error", "", logging.ERROR),
+        (str(logging.WARNING), "Warning", "", logging.WARNING),
+        (str(logging.INFO), "Info", "", logging.INFO),
+        (str(logging.NOTSET), "NotSet", "", logging.NOTSET)
+        ]
+
+        return levels
+
+    def default():
+        return str(logging.ERROR)
\ No newline at end of file
diff --git a/addons/io_scene_gltf2/io/imp/__init__.py b/addons/io_scene_gltf2/io/imp/__init__.py
index 666fdf3f..81f88469 100644
--- a/addons/io_scene_gltf2/io/imp/__init__.py
+++ b/addons/io_scene_gltf2/io/imp/__init__.py
@@ -12,4 +12,4 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-"""IO imp package."""
+from .gltf2_io_gltf import *
\ No newline at end of file
diff --git a/addons/io_scene_gltf2/io/imp/gltf2_io_gltf.py b/addons/io_scene_gltf2/io/imp/gltf2_io_gltf.py
index aa9bda38..f8dca120 100644
--- a/addons/io_scene_gltf2/io/imp/gltf2_io_gltf.py
+++ b/addons/io_scene_gltf2/io/imp/gltf2_io_gltf.py
@@ -30,19 +30,14 @@ class ImportError(RuntimeError):
 class glTFImporter():
     """glTF Importer class."""
 
-    def __init__(self, filename, import_settings):
+    def __init__(self, filename, loglevel=logging.ERROR):
         """initialization."""
         self.filename = filename
-        self.import_settings = import_settings
         self.glb_buffer = None
         self.buffers = {}
         self.accessor_cache = {}
         self.decode_accessor_cache = {}
-
-        if 'loglevel' not in self.import_settings.keys():
-            self.import_settings['loglevel'] = logging.ERROR
-
-        log = Log(import_settings['loglevel'])
+        log = Log(loglevel)
         self.log = log.logger
         self.log_handler = log.hdlr
 
@@ -139,7 +134,7 @@ class glTFImporter():
         if not isfile(self.filename):
             raise ImportError("Please select a file")
 
-        with open(self.filename, 'rb') as f:
+        with open(self.filename, 'rb') as f:
             content = memoryview(f.read())
 
         if content[:4] == b'glTF':
